[gd_scene load_steps=10 format=2]

[ext_resource path="res://resources/hud/health/Health1.png" type="Texture" id=1]
[ext_resource path="res://resources/hud/power/Power1.png" type="Texture" id=2]
[ext_resource path="res://scenes/gui/PopupPanel.tscn" type="PackedScene" id=3]

[sub_resource type="GDScript" id=1]
script/source = "extends Node2D

var active_level = 0 # starting level
var ninja_scene = preload(\"res://scenes/characters/ninja/Character_Scene.tscn\")
var robot_scene = preload(\"res://scenes/characters/robot/Character_Scene.tscn\")

var playable_levels = [
	preload(\"res://scenes/levels/Level_1_Scene.tscn\"),
	preload(\"res://scenes/levels/Level_2_Scene.tscn\")
]

var character_selection = 0
var characters = [
	{\"type\": \"ninja\", \"gender\": \"female\", \"scene\": ninja_scene}, 
	{\"type\": \"ninja\", \"gender\": \"male\", \"scene\": ninja_scene},
	{\"type\": \"robot\", \"gender\": \"male\", \"scene\": robot_scene}
]

var character_stats = {
	\"loaded\": false,
	\"health\": 0,
	\"energy\": 0,
	\"ammo\": 0,
	\"character\": characters[character_selection]
} # player character attributes

onready var health_bar = get_node(\"CanvasLayer/HealthProgress\")
onready var energy_bar = get_node(\"CanvasLayer/EnergyProgress\")
onready var ammo_indication = get_node(\"CanvasLayer/BulletCount\")
onready var health_label = get_node(\"CanvasLayer/HealthLabel\")
onready var energy_label = get_node(\"CanvasLayer/EnergyLabel\")

var character_node = null
var end_door = null

# Called when the node enters the scene tree for the first time.
func _ready():
	# set the game to full screen
	OS.window_fullscreen = false
	OS.keep_screen_on = true
	# start the first level
	advance_to_next_level()
	pass
	
	
#Called every frame. 'delta' is the elapsed time since the previous frame.
func _process(delta):
	# get player input
	handle_events()
	_connect_signals()
	pass


func _connect_signals():
	# get the end door for current level and listen for events, if main character enters the door
	# the signal will emit and the next level will be created
	end_door = get_tree().get_nodes_in_group(\"end_door\")
	if (!end_door.empty()):
		end_door = end_door.front()
		# connect end door signals
		if(!end_door.is_connected(\"enteredEndDoor\", self, \"advance_to_next_level\")):
			end_door.connect(\"enteredEndDoor\", self, \"advance_to_next_level\")
			print(\":: end door connected ::\")
			
	character_node = get_tree().get_nodes_in_group(\"main_character\")
	if (!character_node.empty()):
		character_node = character_node.front()
		_connect_to_character_signals(character_node)
	pass


func handle_events():
	if (Input.is_action_just_pressed(\"ui_cancel\")):
		if (get_tree().paused):
			get_tree().paused = false
		else:
			get_tree().paused = true
	elif (Input.is_action_just_pressed(\"respawn\")):
		if (character_stats[\"health\"] > 0):
			setup_character()
	elif (Input.is_action_just_pressed(\"tab\")):
		character_selection += 1
		
		if (character_selection > characters.size() -1):
			character_selection = 0
		
		# set new selected character
		character_stats[\"character\"] = characters[character_selection]
			
		# create new character
		var newCharacter = (character_stats[\"character\"][\"scene\"]).instance()
		newCharacter.position = character_node.position
		character_node.queue_free()
	
		newCharacter.gender = character_stats[\"character\"][\"gender\"]
		_connect_to_character_signals(newCharacter)
		get_tree().root.add_child(newCharacter)
	pass


func advance_to_next_level():
	print(\"== start next level ==\")
	# remove previous level if exists
	var active_level_scene = get_tree().get_nodes_in_group(\"level\")
	for l in active_level_scene:
		if (l):
			l.queue_free()
	
	# remove all items spawed in previous level if exists
	var power_ups = get_tree().get_nodes_in_group(\"power_up\")
	for l in power_ups:
		if (l):
			l.queue_free()

	# remove all enemies spawed in previous level if exists
	var enemies = get_tree().get_nodes_in_group(\"enemy_character\")
	for l in enemies:
		if (l):
			l.queue_free()
	
	# remove all bones spawed in previous level if exists
	var bones = get_tree().get_nodes_in_group(\"bones\")
	for l in bones:
		if (l):
			l.queue_free()
	
	# increment level and add next level as active scene
	active_level += 1;
	create_level()
	pass


func create_level():
	print(\"== create level ==\")
	var level_scene = playable_levels[active_level - 1]
	if (level_scene):
		level_scene = level_scene.instance()
		if (!level_scene.is_connected(\"entered_level\", self, \"setup_level\")):
			level_scene.connect(\"entered_level\", self, \"setup_level\")
#		if (!level_scene.is_connected(\"exit_level\", self, \"reset_current_scene\")):
#			level_scene.connect(\"exit_level\", self, \"reset_current_scene\")
				
		# set the next level as the current scene
		get_tree().root.call_deferred(\"add_child\", level_scene)
		print(\":: started level \" + str(active_level) + \" ::\")
	pass


func reset_current_scene(character):
	print(\"== resetting the current scene ==\")
	# remove level
	var currentLevel = get_tree().get_nodes_in_group(\"level\")
	if (!currentLevel.empty()):
		currentLevel = currentLevel.front()
		#get_tree().root.remove_child(currentLevel)
		currentLevel.queue_free()

	# recreate level
	create_level()
	pass


func character_ready(character):
	print(\"== character ready ==\")
	if (character_stats[\"loaded\"]):
		character.health = character_stats[\"health\"]
		character.energy = character_stats[\"energy\"]
		character.ammo = character_stats[\"ammo\"]
	else:
		character_stats[\"loaded\"] = true
	
	refresh_hud(character)
	pass
	


func _connect_to_character_signals(character):
	# connect character signals
	if (!character.is_connected(\"reload\", self, \"reset_current_scene\")):
		character.connect(\"reload\", self, \"reset_current_scene\")
	if (!character.is_connected(\"reposition\", self, \"reset_character_position\")):
		character.connect(\"reposition\", self, \"reset_character_position\")
	if (!character.is_connected(\"refresh_hud\", self, \"refresh_hud\")):
		character.connect(\"refresh_hud\", self, \"refresh_hud\")
	if (!character.is_connected(\"character_ready\", self, \"character_ready\")):
		character.connect(\"character_ready\", self, \"character_ready\")
	pass


func reset_character_position():
	# reset character position to start of level
	character_node.position.x = 300
	character_node.position.y = 100
	pass
	

func setup_character():
	print(\"== setup character ==\")
	
	if (character_node):
		character_node.queue_free()

	character_stats[\"loaded\"] = false
	character_node = (character_stats[\"character\"][\"scene\"]).instance()
	character_node.position.x = 300
	character_node.position.y = 100
	character_node.gender = character_stats[\"character\"][\"gender\"]
	get_tree().root.add_child(character_node)
	_connect_to_character_signals(character_node)
	refresh_hud(character_node)
	pass


func setup_level():
	print(\"== setup level ==\")
	if (!self.is_queued_for_deletion()):
		var levelNode = get_tree().get_nodes_in_group(\"level\")
		if (!levelNode.empty()):
			levelNode = levelNode.front()
			get_tree().call_deferred(\"set_current_scene\", levelNode)
	
		# setup character for connected level
		setup_character()
	pass
	

func refresh_hud(character):
	print(\"== refreshing the HUD values ==\")
	# get character attributes for HUD - 
	# HUD is short for Heads Up Display. In video and computer games, 
	# the HUD is the display area where players can see their character's 
	# vital statistics such as current health, bonus attributes, armor level, ammunition count, and more.
	character_stats[\"health\"] = character.health
	character_stats[\"energy\"] = character.energy
	character_stats[\"ammo\"] = character.ammo
	character_stats[\"character\"][\"type\"] = character.type
	character_stats[\"character\"][\"gender\"] = character.gender
	
	health_label.text = str(character.health) + \"/\" + str(character.maxHealth)
	energy_label.text = str(character.energy) + \"/\" + str(character.maxEnergy)
	health_bar.value = character.health
	health_bar.max_value = character.maxHealth
	energy_bar.value = character.energy
	energy_bar.max_value = character.maxEnergy
	ammo_indication.text = \"x\" + str(character.ammo)
	
	var characterBulletImage = load(\"res://resources/characters/\" + character_stats[\"character\"][\"type\"] + \"/png/objects/Bullet_000.png\")
	get_node(\"CanvasLayer/BulletImage\").texture = characterBulletImage
	
	var ammo_packs = get_tree().get_nodes_in_group(\"ammo_pack\")
	if (ammo_packs.size() > 0):
		for l in ammo_packs:
			l.get_node(\"TextureRect\").texture = characterBulletImage
	
	if (!character_stats[\"loaded\"]):
		character_stats[\"loaded\"] = true
	
	print(character_stats)
	pass"

[sub_resource type="StyleBoxFlat" id=2]
bg_color = Color( 0.866667, 0.0901961, 0.0901961, 1 )

[sub_resource type="StyleBoxFlat" id=3]
bg_color = Color( 0.537255, 0.541176, 0.580392, 1 )

[sub_resource type="StyleBoxFlat" id=4]
bg_color = Color( 0.113725, 0.223529, 0.647059, 1 )

[sub_resource type="StyleBoxFlat" id=5]
bg_color = Color( 0.537255, 0.541176, 0.580392, 1 )

[sub_resource type="ImageTexture" id=6]

[node name="World" type="Node2D"]
pause_mode = 2
position = Vector2( 0, -2.72073 )
script = SubResource( 1 )

[node name="CanvasLayer" type="CanvasLayer" parent="." groups=[
"status_bar",
]]

[node name="HealthImage" type="TextureRect" parent="CanvasLayer"]
margin_left = 8.73007
margin_top = 10.2581
margin_right = 38.7301
margin_bottom = 40.2581
texture = ExtResource( 1 )
expand = true
stretch_mode = 1

[node name="HealthProgress" type="ProgressBar" parent="CanvasLayer"]
margin_left = 54.2301
margin_top = 10.2581
margin_right = 254.23
margin_bottom = 40.2581
rect_min_size = Vector2( 200, 0 )
custom_styles/fg = SubResource( 2 )
custom_styles/bg = SubResource( 3 )
custom_colors/font_color = Color( 0, 0, 0, 1 )
custom_colors/font_color_shadow = Color( 0, 0, 0, 1 )
percent_visible = false

[node name="EnergyImage" type="TextureRect" parent="CanvasLayer"]
margin_left = 8.73007
margin_top = 46.2581
margin_right = 38.7301
margin_bottom = 76.2581
texture = ExtResource( 2 )
expand = true

[node name="EnergyProgress" type="ProgressBar" parent="CanvasLayer"]
margin_left = 54.2301
margin_top = 46.2581
margin_right = 254.23
margin_bottom = 76.2581
rect_min_size = Vector2( 200, 0 )
custom_styles/fg = SubResource( 4 )
custom_styles/bg = SubResource( 5 )
custom_colors/font_color = Color( 0, 0, 0, 1 )
percent_visible = false

[node name="BulletImage" type="TextureRect" parent="CanvasLayer"]
margin_left = 256.844
margin_top = 9.23303
margin_right = 296.844
margin_bottom = 39.233
size_flags_horizontal = 0
size_flags_vertical = 0
texture = SubResource( 6 )
expand = true
stretch_mode = 6

[node name="BulletCount" type="Label" parent="CanvasLayer"]
margin_left = 297.844
margin_top = 19.233
margin_right = 306.844
margin_bottom = 33.233
custom_colors/font_color = Color( 0, 0, 0, 1 )
text = "X"

[node name="GridContainer" type="GridContainer" parent="CanvasLayer"]
margin_left = 5.84406
margin_top = -720.767
margin_right = 45.8441
margin_bottom = -680.767

[node name="EnergyLabel" type="Label" parent="CanvasLayer"]
margin_left = 53.9417
margin_top = 45.751
margin_right = 106.942
margin_bottom = 59.751
custom_colors/font_color = Color( 0, 0, 0, 1 )
text = "100/100"
valign = 1

[node name="HealthLabel" type="Label" parent="CanvasLayer"]
margin_left = 53.9417
margin_top = 10.981
margin_right = 106.942
margin_bottom = 24.981
custom_colors/font_color = Color( 0, 0, 0, 1 )
text = "100/100"
valign = 1

[node name="PopupPanel" parent="CanvasLayer" groups=[
"popup",
] instance=ExtResource( 3 )]
margin_left = 598.0
margin_top = 735.0
margin_right = 607.0
margin_bottom = 757.0
